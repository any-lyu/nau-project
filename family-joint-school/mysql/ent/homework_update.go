// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"family-joint-school/model"
	"family-joint-school/mysql/ent/homework"
	"family-joint-school/mysql/ent/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HomeworkUpdate is the builder for updating Homework entities.
type HomeworkUpdate struct {
	config
	hooks    []Hook
	mutation *HomeworkMutation
}

// Where appends a list predicates to the HomeworkUpdate builder.
func (hu *HomeworkUpdate) Where(ps ...predicate.Homework) *HomeworkUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetTitle sets the "title" field.
func (hu *HomeworkUpdate) SetTitle(s string) *HomeworkUpdate {
	hu.mutation.SetTitle(s)
	return hu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (hu *HomeworkUpdate) SetNillableTitle(s *string) *HomeworkUpdate {
	if s != nil {
		hu.SetTitle(*s)
	}
	return hu
}

// ClearTitle clears the value of the "title" field.
func (hu *HomeworkUpdate) ClearTitle() *HomeworkUpdate {
	hu.mutation.ClearTitle()
	return hu
}

// SetContent sets the "content" field.
func (hu *HomeworkUpdate) SetContent(s string) *HomeworkUpdate {
	hu.mutation.SetContent(s)
	return hu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (hu *HomeworkUpdate) SetNillableContent(s *string) *HomeworkUpdate {
	if s != nil {
		hu.SetContent(*s)
	}
	return hu
}

// ClearContent clears the value of the "content" field.
func (hu *HomeworkUpdate) ClearContent() *HomeworkUpdate {
	hu.mutation.ClearContent()
	return hu
}

// SetPics sets the "pics" field.
func (hu *HomeworkUpdate) SetPics(m []model.Pic) *HomeworkUpdate {
	hu.mutation.SetPics(m)
	return hu
}

// ClearPics clears the value of the "pics" field.
func (hu *HomeworkUpdate) ClearPics() *HomeworkUpdate {
	hu.mutation.ClearPics()
	return hu
}

// SetClassID sets the "class_id" field.
func (hu *HomeworkUpdate) SetClassID(u uint8) *HomeworkUpdate {
	hu.mutation.ResetClassID()
	hu.mutation.SetClassID(u)
	return hu
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (hu *HomeworkUpdate) SetNillableClassID(u *uint8) *HomeworkUpdate {
	if u != nil {
		hu.SetClassID(*u)
	}
	return hu
}

// AddClassID adds u to the "class_id" field.
func (hu *HomeworkUpdate) AddClassID(u int8) *HomeworkUpdate {
	hu.mutation.AddClassID(u)
	return hu
}

// ClearClassID clears the value of the "class_id" field.
func (hu *HomeworkUpdate) ClearClassID() *HomeworkUpdate {
	hu.mutation.ClearClassID()
	return hu
}

// SetClassName sets the "class_name" field.
func (hu *HomeworkUpdate) SetClassName(s string) *HomeworkUpdate {
	hu.mutation.SetClassName(s)
	return hu
}

// SetNillableClassName sets the "class_name" field if the given value is not nil.
func (hu *HomeworkUpdate) SetNillableClassName(s *string) *HomeworkUpdate {
	if s != nil {
		hu.SetClassName(*s)
	}
	return hu
}

// ClearClassName clears the value of the "class_name" field.
func (hu *HomeworkUpdate) ClearClassName() *HomeworkUpdate {
	hu.mutation.ClearClassName()
	return hu
}

// SetTeacherID sets the "teacher_id" field.
func (hu *HomeworkUpdate) SetTeacherID(u uint8) *HomeworkUpdate {
	hu.mutation.ResetTeacherID()
	hu.mutation.SetTeacherID(u)
	return hu
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (hu *HomeworkUpdate) SetNillableTeacherID(u *uint8) *HomeworkUpdate {
	if u != nil {
		hu.SetTeacherID(*u)
	}
	return hu
}

// AddTeacherID adds u to the "teacher_id" field.
func (hu *HomeworkUpdate) AddTeacherID(u int8) *HomeworkUpdate {
	hu.mutation.AddTeacherID(u)
	return hu
}

// ClearTeacherID clears the value of the "teacher_id" field.
func (hu *HomeworkUpdate) ClearTeacherID() *HomeworkUpdate {
	hu.mutation.ClearTeacherID()
	return hu
}

// SetExtra sets the "extra" field.
func (hu *HomeworkUpdate) SetExtra(s string) *HomeworkUpdate {
	hu.mutation.SetExtra(s)
	return hu
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (hu *HomeworkUpdate) SetNillableExtra(s *string) *HomeworkUpdate {
	if s != nil {
		hu.SetExtra(*s)
	}
	return hu
}

// ClearExtra clears the value of the "extra" field.
func (hu *HomeworkUpdate) ClearExtra() *HomeworkUpdate {
	hu.mutation.ClearExtra()
	return hu
}

// SetCreatedAt sets the "created_at" field.
func (hu *HomeworkUpdate) SetCreatedAt(t time.Time) *HomeworkUpdate {
	hu.mutation.SetCreatedAt(t)
	return hu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hu *HomeworkUpdate) SetNillableCreatedAt(t *time.Time) *HomeworkUpdate {
	if t != nil {
		hu.SetCreatedAt(*t)
	}
	return hu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (hu *HomeworkUpdate) ClearCreatedAt() *HomeworkUpdate {
	hu.mutation.ClearCreatedAt()
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HomeworkUpdate) SetUpdatedAt(t time.Time) *HomeworkUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (hu *HomeworkUpdate) ClearUpdatedAt() *HomeworkUpdate {
	hu.mutation.ClearUpdatedAt()
	return hu
}

// Mutation returns the HomeworkMutation object of the builder.
func (hu *HomeworkUpdate) Mutation() *HomeworkMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HomeworkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	hu.defaults()
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HomeworkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HomeworkUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HomeworkUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HomeworkUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HomeworkUpdate) defaults() {
	if _, ok := hu.mutation.UpdatedAt(); !ok && !hu.mutation.UpdatedAtCleared() {
		v := homework.UpdateDefaultUpdatedAt()
		hu.mutation.SetUpdatedAt(v)
	}
}

func (hu *HomeworkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   homework.Table,
			Columns: homework.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: homework.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: homework.FieldTitle,
		})
	}
	if hu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: homework.FieldTitle,
		})
	}
	if value, ok := hu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: homework.FieldContent,
		})
	}
	if hu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: homework.FieldContent,
		})
	}
	if value, ok := hu.mutation.Pics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: homework.FieldPics,
		})
	}
	if hu.mutation.PicsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: homework.FieldPics,
		})
	}
	if value, ok := hu.mutation.ClassID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: homework.FieldClassID,
		})
	}
	if value, ok := hu.mutation.AddedClassID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: homework.FieldClassID,
		})
	}
	if hu.mutation.ClassIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: homework.FieldClassID,
		})
	}
	if value, ok := hu.mutation.ClassName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: homework.FieldClassName,
		})
	}
	if hu.mutation.ClassNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: homework.FieldClassName,
		})
	}
	if value, ok := hu.mutation.TeacherID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: homework.FieldTeacherID,
		})
	}
	if value, ok := hu.mutation.AddedTeacherID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: homework.FieldTeacherID,
		})
	}
	if hu.mutation.TeacherIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: homework.FieldTeacherID,
		})
	}
	if value, ok := hu.mutation.Extra(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: homework.FieldExtra,
		})
	}
	if hu.mutation.ExtraCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: homework.FieldExtra,
		})
	}
	if value, ok := hu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: homework.FieldCreatedAt,
		})
	}
	if hu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: homework.FieldCreatedAt,
		})
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: homework.FieldUpdatedAt,
		})
	}
	if hu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: homework.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{homework.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HomeworkUpdateOne is the builder for updating a single Homework entity.
type HomeworkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HomeworkMutation
}

// SetTitle sets the "title" field.
func (huo *HomeworkUpdateOne) SetTitle(s string) *HomeworkUpdateOne {
	huo.mutation.SetTitle(s)
	return huo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (huo *HomeworkUpdateOne) SetNillableTitle(s *string) *HomeworkUpdateOne {
	if s != nil {
		huo.SetTitle(*s)
	}
	return huo
}

// ClearTitle clears the value of the "title" field.
func (huo *HomeworkUpdateOne) ClearTitle() *HomeworkUpdateOne {
	huo.mutation.ClearTitle()
	return huo
}

// SetContent sets the "content" field.
func (huo *HomeworkUpdateOne) SetContent(s string) *HomeworkUpdateOne {
	huo.mutation.SetContent(s)
	return huo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (huo *HomeworkUpdateOne) SetNillableContent(s *string) *HomeworkUpdateOne {
	if s != nil {
		huo.SetContent(*s)
	}
	return huo
}

// ClearContent clears the value of the "content" field.
func (huo *HomeworkUpdateOne) ClearContent() *HomeworkUpdateOne {
	huo.mutation.ClearContent()
	return huo
}

// SetPics sets the "pics" field.
func (huo *HomeworkUpdateOne) SetPics(m []model.Pic) *HomeworkUpdateOne {
	huo.mutation.SetPics(m)
	return huo
}

// ClearPics clears the value of the "pics" field.
func (huo *HomeworkUpdateOne) ClearPics() *HomeworkUpdateOne {
	huo.mutation.ClearPics()
	return huo
}

// SetClassID sets the "class_id" field.
func (huo *HomeworkUpdateOne) SetClassID(u uint8) *HomeworkUpdateOne {
	huo.mutation.ResetClassID()
	huo.mutation.SetClassID(u)
	return huo
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (huo *HomeworkUpdateOne) SetNillableClassID(u *uint8) *HomeworkUpdateOne {
	if u != nil {
		huo.SetClassID(*u)
	}
	return huo
}

// AddClassID adds u to the "class_id" field.
func (huo *HomeworkUpdateOne) AddClassID(u int8) *HomeworkUpdateOne {
	huo.mutation.AddClassID(u)
	return huo
}

// ClearClassID clears the value of the "class_id" field.
func (huo *HomeworkUpdateOne) ClearClassID() *HomeworkUpdateOne {
	huo.mutation.ClearClassID()
	return huo
}

// SetClassName sets the "class_name" field.
func (huo *HomeworkUpdateOne) SetClassName(s string) *HomeworkUpdateOne {
	huo.mutation.SetClassName(s)
	return huo
}

// SetNillableClassName sets the "class_name" field if the given value is not nil.
func (huo *HomeworkUpdateOne) SetNillableClassName(s *string) *HomeworkUpdateOne {
	if s != nil {
		huo.SetClassName(*s)
	}
	return huo
}

// ClearClassName clears the value of the "class_name" field.
func (huo *HomeworkUpdateOne) ClearClassName() *HomeworkUpdateOne {
	huo.mutation.ClearClassName()
	return huo
}

// SetTeacherID sets the "teacher_id" field.
func (huo *HomeworkUpdateOne) SetTeacherID(u uint8) *HomeworkUpdateOne {
	huo.mutation.ResetTeacherID()
	huo.mutation.SetTeacherID(u)
	return huo
}

// SetNillableTeacherID sets the "teacher_id" field if the given value is not nil.
func (huo *HomeworkUpdateOne) SetNillableTeacherID(u *uint8) *HomeworkUpdateOne {
	if u != nil {
		huo.SetTeacherID(*u)
	}
	return huo
}

// AddTeacherID adds u to the "teacher_id" field.
func (huo *HomeworkUpdateOne) AddTeacherID(u int8) *HomeworkUpdateOne {
	huo.mutation.AddTeacherID(u)
	return huo
}

// ClearTeacherID clears the value of the "teacher_id" field.
func (huo *HomeworkUpdateOne) ClearTeacherID() *HomeworkUpdateOne {
	huo.mutation.ClearTeacherID()
	return huo
}

// SetExtra sets the "extra" field.
func (huo *HomeworkUpdateOne) SetExtra(s string) *HomeworkUpdateOne {
	huo.mutation.SetExtra(s)
	return huo
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (huo *HomeworkUpdateOne) SetNillableExtra(s *string) *HomeworkUpdateOne {
	if s != nil {
		huo.SetExtra(*s)
	}
	return huo
}

// ClearExtra clears the value of the "extra" field.
func (huo *HomeworkUpdateOne) ClearExtra() *HomeworkUpdateOne {
	huo.mutation.ClearExtra()
	return huo
}

// SetCreatedAt sets the "created_at" field.
func (huo *HomeworkUpdateOne) SetCreatedAt(t time.Time) *HomeworkUpdateOne {
	huo.mutation.SetCreatedAt(t)
	return huo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (huo *HomeworkUpdateOne) SetNillableCreatedAt(t *time.Time) *HomeworkUpdateOne {
	if t != nil {
		huo.SetCreatedAt(*t)
	}
	return huo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (huo *HomeworkUpdateOne) ClearCreatedAt() *HomeworkUpdateOne {
	huo.mutation.ClearCreatedAt()
	return huo
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HomeworkUpdateOne) SetUpdatedAt(t time.Time) *HomeworkUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (huo *HomeworkUpdateOne) ClearUpdatedAt() *HomeworkUpdateOne {
	huo.mutation.ClearUpdatedAt()
	return huo
}

// Mutation returns the HomeworkMutation object of the builder.
func (huo *HomeworkUpdateOne) Mutation() *HomeworkMutation {
	return huo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HomeworkUpdateOne) Select(field string, fields ...string) *HomeworkUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Homework entity.
func (huo *HomeworkUpdateOne) Save(ctx context.Context) (*Homework, error) {
	var (
		err  error
		node *Homework
	)
	huo.defaults()
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HomeworkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, huo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Homework)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HomeworkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HomeworkUpdateOne) SaveX(ctx context.Context) *Homework {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HomeworkUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HomeworkUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HomeworkUpdateOne) defaults() {
	if _, ok := huo.mutation.UpdatedAt(); !ok && !huo.mutation.UpdatedAtCleared() {
		v := homework.UpdateDefaultUpdatedAt()
		huo.mutation.SetUpdatedAt(v)
	}
}

func (huo *HomeworkUpdateOne) sqlSave(ctx context.Context) (_node *Homework, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   homework.Table,
			Columns: homework.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: homework.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Homework.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, homework.FieldID)
		for _, f := range fields {
			if !homework.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != homework.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: homework.FieldTitle,
		})
	}
	if huo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: homework.FieldTitle,
		})
	}
	if value, ok := huo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: homework.FieldContent,
		})
	}
	if huo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: homework.FieldContent,
		})
	}
	if value, ok := huo.mutation.Pics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: homework.FieldPics,
		})
	}
	if huo.mutation.PicsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: homework.FieldPics,
		})
	}
	if value, ok := huo.mutation.ClassID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: homework.FieldClassID,
		})
	}
	if value, ok := huo.mutation.AddedClassID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: homework.FieldClassID,
		})
	}
	if huo.mutation.ClassIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: homework.FieldClassID,
		})
	}
	if value, ok := huo.mutation.ClassName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: homework.FieldClassName,
		})
	}
	if huo.mutation.ClassNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: homework.FieldClassName,
		})
	}
	if value, ok := huo.mutation.TeacherID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: homework.FieldTeacherID,
		})
	}
	if value, ok := huo.mutation.AddedTeacherID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: homework.FieldTeacherID,
		})
	}
	if huo.mutation.TeacherIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: homework.FieldTeacherID,
		})
	}
	if value, ok := huo.mutation.Extra(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: homework.FieldExtra,
		})
	}
	if huo.mutation.ExtraCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: homework.FieldExtra,
		})
	}
	if value, ok := huo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: homework.FieldCreatedAt,
		})
	}
	if huo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: homework.FieldCreatedAt,
		})
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: homework.FieldUpdatedAt,
		})
	}
	if huo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: homework.FieldUpdatedAt,
		})
	}
	_node = &Homework{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{homework.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
