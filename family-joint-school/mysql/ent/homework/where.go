// Code generated by ent, DO NOT EDIT.

package homework

import (
	"family-joint-school/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ClassID applies equality check predicate on the "class_id" field. It's identical to ClassIDEQ.
func ClassID(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassID), v))
	})
}

// ClassName applies equality check predicate on the "class_name" field. It's identical to ClassNameEQ.
func ClassName(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassName), v))
	})
}

// TeacherID applies equality check predicate on the "teacher_id" field. It's identical to TeacherIDEQ.
func TeacherID(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherID), v))
	})
}

// Extra applies equality check predicate on the "extra" field. It's identical to ExtraEQ.
func Extra(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtra), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContent)))
	})
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContent)))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// PicsIsNil applies the IsNil predicate on the "pics" field.
func PicsIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPics)))
	})
}

// PicsNotNil applies the NotNil predicate on the "pics" field.
func PicsNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPics)))
	})
}

// ClassIDEQ applies the EQ predicate on the "class_id" field.
func ClassIDEQ(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassID), v))
	})
}

// ClassIDNEQ applies the NEQ predicate on the "class_id" field.
func ClassIDNEQ(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassID), v))
	})
}

// ClassIDIn applies the In predicate on the "class_id" field.
func ClassIDIn(vs ...uint8) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassID), v...))
	})
}

// ClassIDNotIn applies the NotIn predicate on the "class_id" field.
func ClassIDNotIn(vs ...uint8) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassID), v...))
	})
}

// ClassIDGT applies the GT predicate on the "class_id" field.
func ClassIDGT(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassID), v))
	})
}

// ClassIDGTE applies the GTE predicate on the "class_id" field.
func ClassIDGTE(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassID), v))
	})
}

// ClassIDLT applies the LT predicate on the "class_id" field.
func ClassIDLT(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassID), v))
	})
}

// ClassIDLTE applies the LTE predicate on the "class_id" field.
func ClassIDLTE(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassID), v))
	})
}

// ClassIDIsNil applies the IsNil predicate on the "class_id" field.
func ClassIDIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassID)))
	})
}

// ClassIDNotNil applies the NotNil predicate on the "class_id" field.
func ClassIDNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassID)))
	})
}

// ClassNameEQ applies the EQ predicate on the "class_name" field.
func ClassNameEQ(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassName), v))
	})
}

// ClassNameNEQ applies the NEQ predicate on the "class_name" field.
func ClassNameNEQ(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassName), v))
	})
}

// ClassNameIn applies the In predicate on the "class_name" field.
func ClassNameIn(vs ...string) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassName), v...))
	})
}

// ClassNameNotIn applies the NotIn predicate on the "class_name" field.
func ClassNameNotIn(vs ...string) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassName), v...))
	})
}

// ClassNameGT applies the GT predicate on the "class_name" field.
func ClassNameGT(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassName), v))
	})
}

// ClassNameGTE applies the GTE predicate on the "class_name" field.
func ClassNameGTE(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassName), v))
	})
}

// ClassNameLT applies the LT predicate on the "class_name" field.
func ClassNameLT(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassName), v))
	})
}

// ClassNameLTE applies the LTE predicate on the "class_name" field.
func ClassNameLTE(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassName), v))
	})
}

// ClassNameContains applies the Contains predicate on the "class_name" field.
func ClassNameContains(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassName), v))
	})
}

// ClassNameHasPrefix applies the HasPrefix predicate on the "class_name" field.
func ClassNameHasPrefix(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassName), v))
	})
}

// ClassNameHasSuffix applies the HasSuffix predicate on the "class_name" field.
func ClassNameHasSuffix(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassName), v))
	})
}

// ClassNameIsNil applies the IsNil predicate on the "class_name" field.
func ClassNameIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassName)))
	})
}

// ClassNameNotNil applies the NotNil predicate on the "class_name" field.
func ClassNameNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassName)))
	})
}

// ClassNameEqualFold applies the EqualFold predicate on the "class_name" field.
func ClassNameEqualFold(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassName), v))
	})
}

// ClassNameContainsFold applies the ContainsFold predicate on the "class_name" field.
func ClassNameContainsFold(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassName), v))
	})
}

// TeacherIDEQ applies the EQ predicate on the "teacher_id" field.
func TeacherIDEQ(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherID), v))
	})
}

// TeacherIDNEQ applies the NEQ predicate on the "teacher_id" field.
func TeacherIDNEQ(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeacherID), v))
	})
}

// TeacherIDIn applies the In predicate on the "teacher_id" field.
func TeacherIDIn(vs ...uint8) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTeacherID), v...))
	})
}

// TeacherIDNotIn applies the NotIn predicate on the "teacher_id" field.
func TeacherIDNotIn(vs ...uint8) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTeacherID), v...))
	})
}

// TeacherIDGT applies the GT predicate on the "teacher_id" field.
func TeacherIDGT(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeacherID), v))
	})
}

// TeacherIDGTE applies the GTE predicate on the "teacher_id" field.
func TeacherIDGTE(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeacherID), v))
	})
}

// TeacherIDLT applies the LT predicate on the "teacher_id" field.
func TeacherIDLT(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeacherID), v))
	})
}

// TeacherIDLTE applies the LTE predicate on the "teacher_id" field.
func TeacherIDLTE(v uint8) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeacherID), v))
	})
}

// TeacherIDIsNil applies the IsNil predicate on the "teacher_id" field.
func TeacherIDIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTeacherID)))
	})
}

// TeacherIDNotNil applies the NotNil predicate on the "teacher_id" field.
func TeacherIDNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTeacherID)))
	})
}

// ExtraEQ applies the EQ predicate on the "extra" field.
func ExtraEQ(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtra), v))
	})
}

// ExtraNEQ applies the NEQ predicate on the "extra" field.
func ExtraNEQ(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtra), v))
	})
}

// ExtraIn applies the In predicate on the "extra" field.
func ExtraIn(vs ...string) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExtra), v...))
	})
}

// ExtraNotIn applies the NotIn predicate on the "extra" field.
func ExtraNotIn(vs ...string) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExtra), v...))
	})
}

// ExtraGT applies the GT predicate on the "extra" field.
func ExtraGT(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtra), v))
	})
}

// ExtraGTE applies the GTE predicate on the "extra" field.
func ExtraGTE(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtra), v))
	})
}

// ExtraLT applies the LT predicate on the "extra" field.
func ExtraLT(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtra), v))
	})
}

// ExtraLTE applies the LTE predicate on the "extra" field.
func ExtraLTE(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtra), v))
	})
}

// ExtraContains applies the Contains predicate on the "extra" field.
func ExtraContains(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtra), v))
	})
}

// ExtraHasPrefix applies the HasPrefix predicate on the "extra" field.
func ExtraHasPrefix(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtra), v))
	})
}

// ExtraHasSuffix applies the HasSuffix predicate on the "extra" field.
func ExtraHasSuffix(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtra), v))
	})
}

// ExtraIsNil applies the IsNil predicate on the "extra" field.
func ExtraIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtra)))
	})
}

// ExtraNotNil applies the NotNil predicate on the "extra" field.
func ExtraNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtra)))
	})
}

// ExtraEqualFold applies the EqualFold predicate on the "extra" field.
func ExtraEqualFold(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtra), v))
	})
}

// ExtraContainsFold applies the ContainsFold predicate on the "extra" field.
func ExtraContainsFold(v string) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtra), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Homework {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Homework(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Homework) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Homework) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Homework) predicate.Homework {
	return predicate.Homework(func(s *sql.Selector) {
		p(s.Not())
	})
}
