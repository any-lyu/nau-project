// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"family-joint-school/model"
	"family-joint-school/mysql/ent/userhomework"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserHomeWork is the model entity for the UserHomeWork schema.
type UserHomeWork struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// HomeworkID holds the value of the "homework_id" field.
	HomeworkID uint64 `json:"homework_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Pics holds the value of the "pics" field.
	Pics []model.Pic `json:"pics,omitempty"`
	// Extra holds the value of the "extra" field.
	Extra string `json:"extra,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserHomeWork) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userhomework.FieldPics:
			values[i] = new([]byte)
		case userhomework.FieldID, userhomework.FieldHomeworkID, userhomework.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userhomework.FieldTitle, userhomework.FieldContent, userhomework.FieldExtra:
			values[i] = new(sql.NullString)
		case userhomework.FieldCreatedAt, userhomework.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserHomeWork", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserHomeWork fields.
func (uhw *UserHomeWork) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userhomework.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uhw.ID = uint64(value.Int64)
		case userhomework.FieldHomeworkID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homework_id", values[i])
			} else if value.Valid {
				uhw.HomeworkID = uint64(value.Int64)
			}
		case userhomework.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uhw.UserID = uint64(value.Int64)
			}
		case userhomework.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				uhw.Title = value.String
			}
		case userhomework.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				uhw.Content = value.String
			}
		case userhomework.FieldPics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &uhw.Pics); err != nil {
					return fmt.Errorf("unmarshal field pics: %w", err)
				}
			}
		case userhomework.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				uhw.Extra = value.String
			}
		case userhomework.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uhw.CreatedAt = value.Time
			}
		case userhomework.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uhw.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserHomeWork.
// Note that you need to call UserHomeWork.Unwrap() before calling this method if this UserHomeWork
// was returned from a transaction, and the transaction was committed or rolled back.
func (uhw *UserHomeWork) Update() *UserHomeWorkUpdateOne {
	return (&UserHomeWorkClient{config: uhw.config}).UpdateOne(uhw)
}

// Unwrap unwraps the UserHomeWork entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uhw *UserHomeWork) Unwrap() *UserHomeWork {
	_tx, ok := uhw.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserHomeWork is not a transactional entity")
	}
	uhw.config.driver = _tx.drv
	return uhw
}

// String implements the fmt.Stringer.
func (uhw *UserHomeWork) String() string {
	var builder strings.Builder
	builder.WriteString("UserHomeWork(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uhw.ID))
	builder.WriteString("homework_id=")
	builder.WriteString(fmt.Sprintf("%v", uhw.HomeworkID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uhw.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(uhw.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(uhw.Content)
	builder.WriteString(", ")
	builder.WriteString("pics=")
	builder.WriteString(fmt.Sprintf("%v", uhw.Pics))
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(uhw.Extra)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(uhw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uhw.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserHomeWorks is a parsable slice of UserHomeWork.
type UserHomeWorks []*UserHomeWork

func (uhw UserHomeWorks) config(cfg config) {
	for _i := range uhw {
		uhw[_i].config = cfg
	}
}
