// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"family-joint-school/model"
	"family-joint-school/mysql/ent/predicate"
	"family-joint-school/mysql/ent/userhomework"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserHomeWorkUpdate is the builder for updating UserHomeWork entities.
type UserHomeWorkUpdate struct {
	config
	hooks    []Hook
	mutation *UserHomeWorkMutation
}

// Where appends a list predicates to the UserHomeWorkUpdate builder.
func (uhwu *UserHomeWorkUpdate) Where(ps ...predicate.UserHomeWork) *UserHomeWorkUpdate {
	uhwu.mutation.Where(ps...)
	return uhwu
}

// SetHomeworkID sets the "homework_id" field.
func (uhwu *UserHomeWorkUpdate) SetHomeworkID(u uint64) *UserHomeWorkUpdate {
	uhwu.mutation.ResetHomeworkID()
	uhwu.mutation.SetHomeworkID(u)
	return uhwu
}

// SetNillableHomeworkID sets the "homework_id" field if the given value is not nil.
func (uhwu *UserHomeWorkUpdate) SetNillableHomeworkID(u *uint64) *UserHomeWorkUpdate {
	if u != nil {
		uhwu.SetHomeworkID(*u)
	}
	return uhwu
}

// AddHomeworkID adds u to the "homework_id" field.
func (uhwu *UserHomeWorkUpdate) AddHomeworkID(u int64) *UserHomeWorkUpdate {
	uhwu.mutation.AddHomeworkID(u)
	return uhwu
}

// ClearHomeworkID clears the value of the "homework_id" field.
func (uhwu *UserHomeWorkUpdate) ClearHomeworkID() *UserHomeWorkUpdate {
	uhwu.mutation.ClearHomeworkID()
	return uhwu
}

// SetUserID sets the "user_id" field.
func (uhwu *UserHomeWorkUpdate) SetUserID(u uint64) *UserHomeWorkUpdate {
	uhwu.mutation.ResetUserID()
	uhwu.mutation.SetUserID(u)
	return uhwu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uhwu *UserHomeWorkUpdate) SetNillableUserID(u *uint64) *UserHomeWorkUpdate {
	if u != nil {
		uhwu.SetUserID(*u)
	}
	return uhwu
}

// AddUserID adds u to the "user_id" field.
func (uhwu *UserHomeWorkUpdate) AddUserID(u int64) *UserHomeWorkUpdate {
	uhwu.mutation.AddUserID(u)
	return uhwu
}

// ClearUserID clears the value of the "user_id" field.
func (uhwu *UserHomeWorkUpdate) ClearUserID() *UserHomeWorkUpdate {
	uhwu.mutation.ClearUserID()
	return uhwu
}

// SetTitle sets the "title" field.
func (uhwu *UserHomeWorkUpdate) SetTitle(s string) *UserHomeWorkUpdate {
	uhwu.mutation.SetTitle(s)
	return uhwu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uhwu *UserHomeWorkUpdate) SetNillableTitle(s *string) *UserHomeWorkUpdate {
	if s != nil {
		uhwu.SetTitle(*s)
	}
	return uhwu
}

// ClearTitle clears the value of the "title" field.
func (uhwu *UserHomeWorkUpdate) ClearTitle() *UserHomeWorkUpdate {
	uhwu.mutation.ClearTitle()
	return uhwu
}

// SetContent sets the "content" field.
func (uhwu *UserHomeWorkUpdate) SetContent(s string) *UserHomeWorkUpdate {
	uhwu.mutation.SetContent(s)
	return uhwu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (uhwu *UserHomeWorkUpdate) SetNillableContent(s *string) *UserHomeWorkUpdate {
	if s != nil {
		uhwu.SetContent(*s)
	}
	return uhwu
}

// ClearContent clears the value of the "content" field.
func (uhwu *UserHomeWorkUpdate) ClearContent() *UserHomeWorkUpdate {
	uhwu.mutation.ClearContent()
	return uhwu
}

// SetPics sets the "pics" field.
func (uhwu *UserHomeWorkUpdate) SetPics(m []model.Pic) *UserHomeWorkUpdate {
	uhwu.mutation.SetPics(m)
	return uhwu
}

// ClearPics clears the value of the "pics" field.
func (uhwu *UserHomeWorkUpdate) ClearPics() *UserHomeWorkUpdate {
	uhwu.mutation.ClearPics()
	return uhwu
}

// SetExtra sets the "extra" field.
func (uhwu *UserHomeWorkUpdate) SetExtra(s string) *UserHomeWorkUpdate {
	uhwu.mutation.SetExtra(s)
	return uhwu
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (uhwu *UserHomeWorkUpdate) SetNillableExtra(s *string) *UserHomeWorkUpdate {
	if s != nil {
		uhwu.SetExtra(*s)
	}
	return uhwu
}

// ClearExtra clears the value of the "extra" field.
func (uhwu *UserHomeWorkUpdate) ClearExtra() *UserHomeWorkUpdate {
	uhwu.mutation.ClearExtra()
	return uhwu
}

// SetCreatedAt sets the "created_at" field.
func (uhwu *UserHomeWorkUpdate) SetCreatedAt(t time.Time) *UserHomeWorkUpdate {
	uhwu.mutation.SetCreatedAt(t)
	return uhwu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uhwu *UserHomeWorkUpdate) SetNillableCreatedAt(t *time.Time) *UserHomeWorkUpdate {
	if t != nil {
		uhwu.SetCreatedAt(*t)
	}
	return uhwu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uhwu *UserHomeWorkUpdate) ClearCreatedAt() *UserHomeWorkUpdate {
	uhwu.mutation.ClearCreatedAt()
	return uhwu
}

// SetUpdatedAt sets the "updated_at" field.
func (uhwu *UserHomeWorkUpdate) SetUpdatedAt(t time.Time) *UserHomeWorkUpdate {
	uhwu.mutation.SetUpdatedAt(t)
	return uhwu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uhwu *UserHomeWorkUpdate) ClearUpdatedAt() *UserHomeWorkUpdate {
	uhwu.mutation.ClearUpdatedAt()
	return uhwu
}

// Mutation returns the UserHomeWorkMutation object of the builder.
func (uhwu *UserHomeWorkUpdate) Mutation() *UserHomeWorkMutation {
	return uhwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uhwu *UserHomeWorkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uhwu.defaults()
	if len(uhwu.hooks) == 0 {
		affected, err = uhwu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserHomeWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uhwu.mutation = mutation
			affected, err = uhwu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uhwu.hooks) - 1; i >= 0; i-- {
			if uhwu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uhwu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uhwu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uhwu *UserHomeWorkUpdate) SaveX(ctx context.Context) int {
	affected, err := uhwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uhwu *UserHomeWorkUpdate) Exec(ctx context.Context) error {
	_, err := uhwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhwu *UserHomeWorkUpdate) ExecX(ctx context.Context) {
	if err := uhwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhwu *UserHomeWorkUpdate) defaults() {
	if _, ok := uhwu.mutation.UpdatedAt(); !ok && !uhwu.mutation.UpdatedAtCleared() {
		v := userhomework.UpdateDefaultUpdatedAt()
		uhwu.mutation.SetUpdatedAt(v)
	}
}

func (uhwu *UserHomeWorkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userhomework.Table,
			Columns: userhomework.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: userhomework.FieldID,
			},
		},
	}
	if ps := uhwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uhwu.mutation.HomeworkID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userhomework.FieldHomeworkID,
		})
	}
	if value, ok := uhwu.mutation.AddedHomeworkID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userhomework.FieldHomeworkID,
		})
	}
	if uhwu.mutation.HomeworkIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: userhomework.FieldHomeworkID,
		})
	}
	if value, ok := uhwu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userhomework.FieldUserID,
		})
	}
	if value, ok := uhwu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userhomework.FieldUserID,
		})
	}
	if uhwu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: userhomework.FieldUserID,
		})
	}
	if value, ok := uhwu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userhomework.FieldTitle,
		})
	}
	if uhwu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userhomework.FieldTitle,
		})
	}
	if value, ok := uhwu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userhomework.FieldContent,
		})
	}
	if uhwu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userhomework.FieldContent,
		})
	}
	if value, ok := uhwu.mutation.Pics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: userhomework.FieldPics,
		})
	}
	if uhwu.mutation.PicsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: userhomework.FieldPics,
		})
	}
	if value, ok := uhwu.mutation.Extra(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userhomework.FieldExtra,
		})
	}
	if uhwu.mutation.ExtraCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userhomework.FieldExtra,
		})
	}
	if value, ok := uhwu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userhomework.FieldCreatedAt,
		})
	}
	if uhwu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userhomework.FieldCreatedAt,
		})
	}
	if value, ok := uhwu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userhomework.FieldUpdatedAt,
		})
	}
	if uhwu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userhomework.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uhwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userhomework.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserHomeWorkUpdateOne is the builder for updating a single UserHomeWork entity.
type UserHomeWorkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserHomeWorkMutation
}

// SetHomeworkID sets the "homework_id" field.
func (uhwuo *UserHomeWorkUpdateOne) SetHomeworkID(u uint64) *UserHomeWorkUpdateOne {
	uhwuo.mutation.ResetHomeworkID()
	uhwuo.mutation.SetHomeworkID(u)
	return uhwuo
}

// SetNillableHomeworkID sets the "homework_id" field if the given value is not nil.
func (uhwuo *UserHomeWorkUpdateOne) SetNillableHomeworkID(u *uint64) *UserHomeWorkUpdateOne {
	if u != nil {
		uhwuo.SetHomeworkID(*u)
	}
	return uhwuo
}

// AddHomeworkID adds u to the "homework_id" field.
func (uhwuo *UserHomeWorkUpdateOne) AddHomeworkID(u int64) *UserHomeWorkUpdateOne {
	uhwuo.mutation.AddHomeworkID(u)
	return uhwuo
}

// ClearHomeworkID clears the value of the "homework_id" field.
func (uhwuo *UserHomeWorkUpdateOne) ClearHomeworkID() *UserHomeWorkUpdateOne {
	uhwuo.mutation.ClearHomeworkID()
	return uhwuo
}

// SetUserID sets the "user_id" field.
func (uhwuo *UserHomeWorkUpdateOne) SetUserID(u uint64) *UserHomeWorkUpdateOne {
	uhwuo.mutation.ResetUserID()
	uhwuo.mutation.SetUserID(u)
	return uhwuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uhwuo *UserHomeWorkUpdateOne) SetNillableUserID(u *uint64) *UserHomeWorkUpdateOne {
	if u != nil {
		uhwuo.SetUserID(*u)
	}
	return uhwuo
}

// AddUserID adds u to the "user_id" field.
func (uhwuo *UserHomeWorkUpdateOne) AddUserID(u int64) *UserHomeWorkUpdateOne {
	uhwuo.mutation.AddUserID(u)
	return uhwuo
}

// ClearUserID clears the value of the "user_id" field.
func (uhwuo *UserHomeWorkUpdateOne) ClearUserID() *UserHomeWorkUpdateOne {
	uhwuo.mutation.ClearUserID()
	return uhwuo
}

// SetTitle sets the "title" field.
func (uhwuo *UserHomeWorkUpdateOne) SetTitle(s string) *UserHomeWorkUpdateOne {
	uhwuo.mutation.SetTitle(s)
	return uhwuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uhwuo *UserHomeWorkUpdateOne) SetNillableTitle(s *string) *UserHomeWorkUpdateOne {
	if s != nil {
		uhwuo.SetTitle(*s)
	}
	return uhwuo
}

// ClearTitle clears the value of the "title" field.
func (uhwuo *UserHomeWorkUpdateOne) ClearTitle() *UserHomeWorkUpdateOne {
	uhwuo.mutation.ClearTitle()
	return uhwuo
}

// SetContent sets the "content" field.
func (uhwuo *UserHomeWorkUpdateOne) SetContent(s string) *UserHomeWorkUpdateOne {
	uhwuo.mutation.SetContent(s)
	return uhwuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (uhwuo *UserHomeWorkUpdateOne) SetNillableContent(s *string) *UserHomeWorkUpdateOne {
	if s != nil {
		uhwuo.SetContent(*s)
	}
	return uhwuo
}

// ClearContent clears the value of the "content" field.
func (uhwuo *UserHomeWorkUpdateOne) ClearContent() *UserHomeWorkUpdateOne {
	uhwuo.mutation.ClearContent()
	return uhwuo
}

// SetPics sets the "pics" field.
func (uhwuo *UserHomeWorkUpdateOne) SetPics(m []model.Pic) *UserHomeWorkUpdateOne {
	uhwuo.mutation.SetPics(m)
	return uhwuo
}

// ClearPics clears the value of the "pics" field.
func (uhwuo *UserHomeWorkUpdateOne) ClearPics() *UserHomeWorkUpdateOne {
	uhwuo.mutation.ClearPics()
	return uhwuo
}

// SetExtra sets the "extra" field.
func (uhwuo *UserHomeWorkUpdateOne) SetExtra(s string) *UserHomeWorkUpdateOne {
	uhwuo.mutation.SetExtra(s)
	return uhwuo
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (uhwuo *UserHomeWorkUpdateOne) SetNillableExtra(s *string) *UserHomeWorkUpdateOne {
	if s != nil {
		uhwuo.SetExtra(*s)
	}
	return uhwuo
}

// ClearExtra clears the value of the "extra" field.
func (uhwuo *UserHomeWorkUpdateOne) ClearExtra() *UserHomeWorkUpdateOne {
	uhwuo.mutation.ClearExtra()
	return uhwuo
}

// SetCreatedAt sets the "created_at" field.
func (uhwuo *UserHomeWorkUpdateOne) SetCreatedAt(t time.Time) *UserHomeWorkUpdateOne {
	uhwuo.mutation.SetCreatedAt(t)
	return uhwuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uhwuo *UserHomeWorkUpdateOne) SetNillableCreatedAt(t *time.Time) *UserHomeWorkUpdateOne {
	if t != nil {
		uhwuo.SetCreatedAt(*t)
	}
	return uhwuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uhwuo *UserHomeWorkUpdateOne) ClearCreatedAt() *UserHomeWorkUpdateOne {
	uhwuo.mutation.ClearCreatedAt()
	return uhwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uhwuo *UserHomeWorkUpdateOne) SetUpdatedAt(t time.Time) *UserHomeWorkUpdateOne {
	uhwuo.mutation.SetUpdatedAt(t)
	return uhwuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uhwuo *UserHomeWorkUpdateOne) ClearUpdatedAt() *UserHomeWorkUpdateOne {
	uhwuo.mutation.ClearUpdatedAt()
	return uhwuo
}

// Mutation returns the UserHomeWorkMutation object of the builder.
func (uhwuo *UserHomeWorkUpdateOne) Mutation() *UserHomeWorkMutation {
	return uhwuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uhwuo *UserHomeWorkUpdateOne) Select(field string, fields ...string) *UserHomeWorkUpdateOne {
	uhwuo.fields = append([]string{field}, fields...)
	return uhwuo
}

// Save executes the query and returns the updated UserHomeWork entity.
func (uhwuo *UserHomeWorkUpdateOne) Save(ctx context.Context) (*UserHomeWork, error) {
	var (
		err  error
		node *UserHomeWork
	)
	uhwuo.defaults()
	if len(uhwuo.hooks) == 0 {
		node, err = uhwuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserHomeWorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uhwuo.mutation = mutation
			node, err = uhwuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uhwuo.hooks) - 1; i >= 0; i-- {
			if uhwuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uhwuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uhwuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserHomeWork)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserHomeWorkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uhwuo *UserHomeWorkUpdateOne) SaveX(ctx context.Context) *UserHomeWork {
	node, err := uhwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uhwuo *UserHomeWorkUpdateOne) Exec(ctx context.Context) error {
	_, err := uhwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhwuo *UserHomeWorkUpdateOne) ExecX(ctx context.Context) {
	if err := uhwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhwuo *UserHomeWorkUpdateOne) defaults() {
	if _, ok := uhwuo.mutation.UpdatedAt(); !ok && !uhwuo.mutation.UpdatedAtCleared() {
		v := userhomework.UpdateDefaultUpdatedAt()
		uhwuo.mutation.SetUpdatedAt(v)
	}
}

func (uhwuo *UserHomeWorkUpdateOne) sqlSave(ctx context.Context) (_node *UserHomeWork, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userhomework.Table,
			Columns: userhomework.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: userhomework.FieldID,
			},
		},
	}
	id, ok := uhwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserHomeWork.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uhwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userhomework.FieldID)
		for _, f := range fields {
			if !userhomework.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userhomework.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uhwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uhwuo.mutation.HomeworkID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userhomework.FieldHomeworkID,
		})
	}
	if value, ok := uhwuo.mutation.AddedHomeworkID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userhomework.FieldHomeworkID,
		})
	}
	if uhwuo.mutation.HomeworkIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: userhomework.FieldHomeworkID,
		})
	}
	if value, ok := uhwuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userhomework.FieldUserID,
		})
	}
	if value, ok := uhwuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userhomework.FieldUserID,
		})
	}
	if uhwuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: userhomework.FieldUserID,
		})
	}
	if value, ok := uhwuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userhomework.FieldTitle,
		})
	}
	if uhwuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userhomework.FieldTitle,
		})
	}
	if value, ok := uhwuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userhomework.FieldContent,
		})
	}
	if uhwuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userhomework.FieldContent,
		})
	}
	if value, ok := uhwuo.mutation.Pics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: userhomework.FieldPics,
		})
	}
	if uhwuo.mutation.PicsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: userhomework.FieldPics,
		})
	}
	if value, ok := uhwuo.mutation.Extra(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userhomework.FieldExtra,
		})
	}
	if uhwuo.mutation.ExtraCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userhomework.FieldExtra,
		})
	}
	if value, ok := uhwuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userhomework.FieldCreatedAt,
		})
	}
	if uhwuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userhomework.FieldCreatedAt,
		})
	}
	if value, ok := uhwuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userhomework.FieldUpdatedAt,
		})
	}
	if uhwuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userhomework.FieldUpdatedAt,
		})
	}
	_node = &UserHomeWork{config: uhwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uhwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userhomework.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
